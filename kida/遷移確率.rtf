{\rtf1\ansi\ansicpg932\cocoartf2708
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 import pandas as pd\
import numpy as np\
import cvxpy as cp\
\
data_hourly = pd.read_csv('/Volumes/KIOXIA SSD/data/NHK_\uc0\u22269 \u27665 \u29983 \u27963 \u35519 \u26619 /\u34892 \u21205 \u12486 \u12441 \u12540 \u12479 \u20316 \u25104 \u12398 \u12383 \u12417 \u25972 \u24418 \u12375 \u12383 \u12486 \u12441 \u12540 \u12479 /\u26332 \u26085 \u12539 \u24180 \u23652 \u21029 _1\u26178 \u38291 \u12371 \u12441 \u12392 \u12398 \u26178 \u38291 \u24111 \u21029 \u12486 \u12441 \u12540 \u12479 /\u24179 \u26085 _\u30007 \u65298 \u65296 \u20195 \u65288 \u65297 \u26178 \u38291 \u12371 \u12441 \u12392 \u65289 .csv')\
data_full_day = pd.read_csv('/Volumes/KIOXIA SSD/data/NHK_\uc0\u22269 \u27665 \u29983 \u27963 \u35519 \u26619 /\u34892 \u21205 \u12486 \u12441 \u12540 \u12479 \u20316 \u25104 \u12398 \u12383 \u12417 \u25972 \u24418 \u12375 \u12383 \u12486 \u12441 \u12540 \u12479 /\u26332 \u26085 \u12539 \u24180 \u23652 \u21029 _\u65297 \u26085 \u12398 \u34892 \u21205 \u12486 \u12441 \u12540 \u12479 /\u24179 \u26085 _\u30007 \u65298 \u65296 \u20195 .csv')\
\
# \uc0\u12487 \u12540 \u12479 \u12501 \u12524 \u12540 \u12512 \u12434 \u21442 \u29031 \u12522 \u12473 \u12488 \u12395 \u22522 \u12389 \u12356 \u12390 \u12477 \u12540 \u12488 \u12377 \u12427 \u12504 \u12523 \u12497 \u12540 \u38306 \u25968 \
def sort_df_by_list(df, column, reference_list):\
    return df.set_index(column).reindex(reference_list).reset_index()\
\
# \uc0\u36983 \u31227 \u29575 \u12434 \u35336 \u31639 \u12377 \u12427 \u38306 \u25968 \
def calc_transition_rates(beta_i: np.ndarray, time_list: list, time_table: pd.DataFrame, activity_list: list):\
    transition_rates = []\
    middle = activity_list  # \uc0\u27963 \u21205 \u12398 \u12522 \u12473 \u12488 \u12434 \u22522 \u28310 \u12392 \u12375 \u12390 \u20351 \u29992 \
    \
    for i in range(len(time_list)):\
        time_t = time_list[i]\
        time_t1 = time_list[(i+1) % len(time_list)]  # \uc0\u27425 \u12398 \u26178 \u38291 \u24111 \
        \
        # \uc0\u20001 \u26041 \u12398 \u26178 \u38291 \u24111 \u12398 \u34892 \u21205 \u29575 \u12434 \u21462 \u24471 \
        y_t = np.array(sort_df_by_list(time_table.query("Time == @time_t"), "Activity", middle)["Rate"])\
        y_t1 = np.array(sort_df_by_list(time_table.query("Time == @time_t1"), "Activity", middle)["Rate"])\
        \
        # \uc0\u22793 \u25968 \u12398 \u23450 \u32681 \
        no_of_elem = len(middle)\
        a = cp.Variable((no_of_elem, no_of_elem), nonneg=True)  # \uc0\u38750 \u36000 \u12398 \u35201 \u32032 \u12434 \u25345 \u12388 \u36983 \u31227 \u34892 \u21015 \
\
        # \uc0\u30446 \u30340 \u38306 \u25968 \u12392 \u21046 \u32004 \u26465 \u20214 \u12398 \u23450 \u32681 \
        delta = np.eye(no_of_elem)  # \uc0\u12463 \u12525 \u12493 \u12483 \u12459 \u12540 \u12398 \u12487 \u12523 \u12479 \
        beta_i = np.ones(no_of_elem)\
\
        # \uc0\u30446 \u30340 \u38306 \u25968 : (1 - beta_i * delta) \u12391 \u20462 \u27491 \u12373 \u12428 \u12383 \u12289 \u20108 \u20055 \u24046 \u12398 \u21512 \u35336 \u12434 \u26368 \u23567 \u21270 \
        objective = cp.Minimize(cp.sum(cp.multiply(1 - beta_i * delta, cp.square(a))))\
\
        # \uc0\u34892 \u12398 \u21644 \u12364 1\u12395 \u12394 \u12427 \u21046 \u32004 \u12395 \u22793 \u26356 \
        constraints = [\
            cp.sum(a, axis=1) == 1,  # \uc0\u36983 \u31227 \u34892 \u21015 \u12398 \u21508 \u34892 \u12398 \u21644 \u12364 1\u12395 \u12394 \u12427 \u21046 \u32004 \
            a >= 0,  # \uc0\u38750 \u36000 \u21046 \u32004 \
        ]\
\
        # \uc0\u34892 \u21205 \u29575 \u12434 \u27491 \u35215 \u21270 \
        y_t = y_t / np.sum(y_t)\
        y_t1 = y_t1 / np.sum(y_t1)\
\
        # \uc0\u27425 \u12398 \u26178 \u38291 \u24111 \u12398 \u34892 \u21205 \u29575 \u12392 \u36983 \u31227 \u34892 \u21015 \u12398 \u36969 \u29992 \u12364 \u19968 \u33268 \u12377 \u12427 \u21046 \u32004 \
        constraints.append(y_t1 - a.T @ y_t == 0)\
\
        # \uc0\u21839 \u38988 \u12434 \u23450 \u32681 \u12377 \u12427 \
        problem = cp.Problem(objective, constraints)\
\
        # \uc0\u12477 \u12523 \u12496 \u12540 \u12434 \u20351 \u29992 \u12375 \u12390 \u21839 \u38988 \u12434 \u35299 \u12367 \u65288 \u21029 \u12398 \u12477 \u12523 \u12496 \u12540 \u12434 \u25351 \u23450 \u12375 \u12390 \u35299 \u12367 \u65289 \
        problem.solve(solver=cp.SCS, verbose=True)\
\
        # \uc0\u24471 \u12425 \u12428 \u12383 \u36983 \u31227 \u34892 \u21015 \u12434 \u26684 \u32013 \
        transition_rates.append(a.value)\
\
    return np.array(transition_rates)\
\
# \uc0\u12487 \u12540 \u12479 \u12434 \u28310 \u20633 \
data_hourly_clean = data_hourly[['\uc0\u34892 \u21205 ', '\u26178 \u21051 (\u26178 \u38291 :\u20998 )', '\u34892 \u28858 \u32773 \u29575 (%)']].copy()\
data_hourly_clean.columns = ['Activity', 'Time', 'Rate']\
data_hourly_clean['Time'] = pd.to_datetime(data_hourly_clean['Time'])\
data_hourly_clean = data_hourly_clean.sort_values(by='Time')\
\
# \uc0\u12450 \u12463 \u12486 \u12451 \u12499 \u12486 \u12451 \u12392 \u26178 \u38291 \u12398 \u12522 \u12473 \u12488 \u12434 \u21462 \u24471 \
activity_list_hourly = data_hourly_clean['Activity'].unique()\
time_list_hourly = data_hourly_clean['Time'].unique()\
\
# \uc0\u36983 \u31227 \u30906 \u29575 \u12434 \u35336 \u31639 \
transition_rates_hourly = calc_transition_rates(np.ones(len(activity_list_hourly)), time_list_hourly, data_hourly_clean, activity_list_hourly)\
\
# \uc0\u36983 \u31227 \u30906 \u29575 \u12434 \u34920 \u31034 \
print(transition_rates_hourly)\
}